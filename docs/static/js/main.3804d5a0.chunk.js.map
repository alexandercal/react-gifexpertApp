{"version":3,"sources":["Components/AddCategory.js","helpers/GetGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","propType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4NAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAiB5C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAkBO,OACnCN,EAAc,MAMlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAnBa,SAACP,GAClBF,EAAcE,EAAEQ,OAAOF,aAwB/BZ,EAAYe,SAAW,CACnBd,cAAee,IAAUC,KAAKC,Y,mCChCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACrB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT3B,kBAaZM,GAbY,4CAAH,sDCWLO,EATK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCkCDO,EAnCC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDJ,SAACA,GAAc,IAAD,EACZlB,mBAAS,CAC/ByB,KAAK,GACLa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACPwB,MACG,SAAAd,GACIY,EAAS,CACLf,KAAKG,EACLU,SAAQ,SAIrB,CAACpB,IAEGqB,EDdwBI,CAAazB,GAAhCa,EAHgB,EAGrBN,KAAaa,EAHQ,EAGRA,QAcpB,OACI,qCACI,6BAAKpB,IACJoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,8CAAf,SACI,6BAEIH,EAAOJ,KACH,SAAAC,GAAG,OACC,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eExBrCe,EAAe,WAAK,IAAD,EACQ5C,mBAAS,CAAC,cADlB,mBACrB6C,EADqB,KACT9C,EADS,KAK5B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ8C,EAAWlB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCVd4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACCC,SAASC,eAAe,SAM7BX,M","file":"static/js/main.3804d5a0.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        // console.log([...setCategories, e.target.value])\r\n        if (inputValue.trim().length>2){\r\n            setCategories(cat=>[inputValue, ...cat,]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}> \r\n            <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propType = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category)=>{\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=6QEZTpx7vE8eBsDKx1hzMBT5MQbtXi2R`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    // console.log(data);\r\n    const gifs = data.map((img)=>{\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        }\r\n    )\r\n    return gifs;\r\n    //console.log(gifs);\r\n    //setImages(gifs);\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React /*, {useState, useEffect}*/ from 'react'\r\nimport {useFetchGifs} from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/GetGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    // console.log(loading);\r\n\r\n    //UseEfect se usua para no renderizar todo el componente. En este caso si se aidcionara un button se dispara siempre el fectch\r\n    //entonces se usa el use efect para evitar eso\r\n    /// se va a hacer un customhooks\r\n    // useEffect(() => {\r\n    //     getGifs(category).then(\r\n    //         setImages\r\n    //     )\r\n    // }, [category])\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                <ol>\r\n                    {\r\n                    images.map(\r\n                        img=>\r\n                            <GifGridItem key={img.id} {...img}/>\r\n                    )\r\n                    }\r\n                </ol>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import {useEffect, useState} from 'react';\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then(\r\n            img=>{\r\n                setstate({\r\n                    data:img,\r\n                    loading:false\r\n                })\r\n            }\r\n        )\r\n    }, [category]);\r\n\r\n    return state; //{data:[], loading:true}\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport GifGrid from './Components/GifGrid';\r\n// import ReactDOM from 'react-dom';\r\n// import PropTypes from 'prop-types';\r\n\r\n\r\nexport const GifExpertApp = ()=>{\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    // const handleAdd = (e)=>{\r\n    //     setCategories([...categories, 'xHunter']);\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories}/>\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map((category)=>\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp/>,\n     document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}